services:
  # app-dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   ports:
  #     - '3001:3001'
  #   depends_on:
  #     db-dev:
  #       condition: service_healthy
  #   environment:
  #     - NODE_ENV=development
  #   command: npm run start:dev
  #   networks:
  #     - app-network

  app-prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - '3000:3000'
    depends_on:
      db-prod:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DB_PORT=5432
      - DB_HOST=db-prod
      - DB_USER=yourusername 
      - DB_PASSWORD=GvXWmzMLP03HNmrp 
      - DB_NAME=nestdb_prod 
      - JWT_SECRET=PROD_SECRET_KEY 
      - JWT_EXPIRES_IN=1d 
      - DB_SYNCHRONIZE=true
    command: npm run start:prod
    networks:
      - app-network

  # db-dev:
  #   image: postgres:14
  #   environment:
  #     POSTGRES_USER: yourusername
  #     POSTGRES_PASSWORD: GvXWmzMLP03HNmrp
  #     POSTGRES_DB: nestdb_dev
  #   volumes:
  #     - postgres_data_dev:/var/lib/postgresql/data
  #   ports:
  #     - '5432:5433'
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U yourusername"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - app-network

  db-prod:
    image: postgres:14
    environment:
      POSTGRES_USER: yourusername
      POSTGRES_PASSWORD: GvXWmzMLP03HNmrp
      POSTGRES_DB: nestdb_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - '5433:5432'  # Изменено с '5433:5433' на '5433:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yourusername"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      # - db-dev
      - db-prod
    networks:
      - app-network

  # frontend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - app-prod
  #   restart: unless-stopped

volumes:
  postgres_data_dev:
  postgres_data_prod:

networks:
  app-network:
    driver: bridge
